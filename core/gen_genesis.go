// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package core

import (
	"encoding/json"
	"errors"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/params"
)

// MarshalJSON marshals as JSON.
func (g Genesis) MarshalJSON() ([]byte, error) {
	type Genesis struct {
		Config     *params.ChainConfig `json:"config"`
		Timestamp  uint64              `json:"timestamp"`
		ExtraData  []byte              `json:"extraData"`
		GasLimit   uint64              `json:"gasLimit"   gencodec:"required"`
		Mixhash    common.Hash         `json:"mixHash"`
		Coinbase   common.Address      `json:"coinbase"`
		Alloc      GenesisAlloc        `json:"alloc"      gencodec:"required"`
		Number     uint64              `json:"number"`
		GasUsed    uint64              `json:"gasUsed"`
		ParentHash common.Hash         `json:"parentHash"`
	}
	var enc Genesis
	enc.Config = g.Config
	enc.Timestamp = g.Timestamp
	enc.ExtraData = g.ExtraData
	enc.GasLimit = g.GasLimit
	enc.Mixhash = g.Mixhash
	enc.Coinbase = g.Coinbase
	enc.Alloc = g.Alloc
	enc.Number = g.Number
	enc.GasUsed = g.GasUsed
	enc.ParentHash = g.ParentHash
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (g *Genesis) UnmarshalJSON(input []byte) error {
	type Genesis struct {
		Config     *params.ChainConfig `json:"config"`
		Timestamp  *uint64             `json:"timestamp"`
		ExtraData  []byte              `json:"extraData"`
		GasLimit   *uint64             `json:"gasLimit"   gencodec:"required"`
		Mixhash    *common.Hash        `json:"mixHash"`
		Coinbase   *common.Address     `json:"coinbase"`
		Alloc      *GenesisAlloc       `json:"alloc"      gencodec:"required"`
		Number     *uint64             `json:"number"`
		GasUsed    *uint64             `json:"gasUsed"`
		ParentHash *common.Hash        `json:"parentHash"`
	}
	var dec Genesis
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Config != nil {
		g.Config = dec.Config
	}
	if dec.Timestamp != nil {
		g.Timestamp = *dec.Timestamp
	}
	if dec.ExtraData != nil {
		g.ExtraData = dec.ExtraData
	}
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for Genesis")
	}
	g.GasLimit = *dec.GasLimit
	if dec.Mixhash != nil {
		g.Mixhash = *dec.Mixhash
	}
	if dec.Coinbase != nil {
		g.Coinbase = *dec.Coinbase
	}
	if dec.Alloc == nil {
		return errors.New("missing required field 'alloc' for Genesis")
	}
	g.Alloc = *dec.Alloc
	if dec.Number != nil {
		g.Number = *dec.Number
	}
	if dec.GasUsed != nil {
		g.GasUsed = *dec.GasUsed
	}
	if dec.ParentHash != nil {
		g.ParentHash = *dec.ParentHash
	}
	return nil
}
